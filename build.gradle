plugins {
    id 'idea'
    id 'net.minecraftforge.gradle' version "${forge_gradle_version}"
    id 'org.spongepowered.mixin' version "${mixin_gradle_version}"
}

version = mod_version
group = mod_id
base.archivesName = mod_name

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: mappings_channel, version: mappings_version
}

repositories {
    flatDir { dirs 'libs' }
    maven {
        url 'https://maven.cleanroommc.com'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', includes: ['*jar'])

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation "org.spongepowered:mixin:${mixin_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    // ForgeGradle:
    implementation ('zone.rong:mixinbooter:10.6') {
        transitive = false
    }
    annotationProcessor ('zone.rong:mixinbooter:10.6') {
        transitive = false
    }

    // RetroFuturaGradle:
    //String mixinBooter = modUtils.enableMixins('zone.rong:mixinbooter:10.6')
    // modUtils.enableMixins('zone.rong:mixinbooter:10.6', 'mod_id.mixins.refmap.json') << add refmap name as 2nd arg (optional)
    //api (mixinBooter) {
    //    transitive = false
    //}
    //annotationProcessor (mixinBooter) {
    //    transitive = false
    //}
}

mixin {
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
}

processResources {
    var replaceProperties = [
            'mod_id': mod_id,
            'mod_name': mod_name,
            'version': mod_version,
            'mcversion': minecraft_version,
            'mod_description': mod_description,
            'mod_author': mod_author
    ]

    inputs.properties replaceProperties

    filesMatching('mcmod.info') {
        expand replaceProperties
    }
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : '1',
                'Implementation-Title'    : mod_name,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Version'  : mod_version,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLCorePlugin': mixin_loader_class,
                'FMLCorePluginContainsFMLMod': 'true',
                'ForceLoadAsMod': 'true', //Comment out in dev environment, uncomment for building
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker'
        ])
    }
}

jar.finalizedBy('reobfJar')